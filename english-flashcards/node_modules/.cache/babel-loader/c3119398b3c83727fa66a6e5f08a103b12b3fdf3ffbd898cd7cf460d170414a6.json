{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../config/supabase';\nexport const useSupabase = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchCards = async () => {\n    try {\n      setLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.from('word_cards').select('*').order('card_number', {\n        ascending: true\n      });\n      if (error) throw error;\n      setCards(data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addCard = async cardData => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('word_cards').insert([cardData]).select();\n      if (error) throw error;\n      setCards([...cards, data[0]]);\n      return data[0];\n    } catch (err) {\n      setError(err.message);\n      return null;\n    }\n  };\n  useEffect(() => {\n    fetchCards();\n  }, []);\n  return {\n    cards,\n    loading,\n    error,\n    fetchCards,\n    addCard\n  };\n};\n_s(useSupabase, \"gtukppxsqAvVS85tDLMEGeSXJVg=\");","map":{"version":3,"names":["useState","useEffect","supabase","useSupabase","_s","cards","setCards","loading","setLoading","error","setError","fetchCards","data","from","select","order","ascending","err","message","addCard","cardData","insert"],"sources":["E:/EnglishWordCards/EnglishWordCards7/english-flashcards/src/hooks/useSupabase.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from '../config/supabase';\n\nexport const useSupabase = () => {\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchCards = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('word_cards')\n        .select('*')\n        .order('card_number', { ascending: true });\n\n      if (error) throw error;\n      setCards(data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addCard = async (cardData) => {\n    try {\n      const { data, error } = await supabase\n        .from('word_cards')\n        .insert([cardData])\n        .select();\n\n      if (error) throw error;\n      setCards([...cards, data[0]]);\n      return data[0];\n    } catch (err) {\n      setError(err.message);\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    fetchCards();\n  }, []);\n\n  return { cards, loading, error, fetchCards, addCard };\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,oBAAoB;AAE7C,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACFH,UAAU,CAAC,IAAI,CAAC;MAChB,MAAM;QAAEI,IAAI;QAAEH;MAAM,CAAC,GAAG,MAAMP,QAAQ,CACnCW,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,aAAa,EAAE;QAAEC,SAAS,EAAE;MAAK,CAAC,CAAC;MAE5C,IAAIP,KAAK,EAAE,MAAMA,KAAK;MACtBH,QAAQ,CAACM,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZP,QAAQ,CAACO,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRV,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMW,OAAO,GAAG,MAAOC,QAAQ,IAAK;IAClC,IAAI;MACF,MAAM;QAAER,IAAI;QAAEH;MAAM,CAAC,GAAG,MAAMP,QAAQ,CACnCW,IAAI,CAAC,YAAY,CAAC,CAClBQ,MAAM,CAAC,CAACD,QAAQ,CAAC,CAAC,CAClBN,MAAM,CAAC,CAAC;MAEX,IAAIL,KAAK,EAAE,MAAMA,KAAK;MACtBH,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7B,OAAOA,IAAI,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZP,QAAQ,CAACO,GAAG,CAACC,OAAO,CAAC;MACrB,OAAO,IAAI;IACb;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACdU,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEN,KAAK;IAAEE,OAAO;IAAEE,KAAK;IAAEE,UAAU;IAAEQ;EAAQ,CAAC;AACvD,CAAC;AAACf,EAAA,CA3CWD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}